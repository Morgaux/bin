#!/bin/sh

##
# Dynamic Status - set status for dwm
##



################################################################################
#                              Configuration vars                              #
################################################################################

PREFIX="" # "" means / set to $HOME for local files
SELF="$(basename "$0")"
SRC_DIR="$(dirname "$0")"
TMP_DIR="$PREFIX/tmp"
PIDFILE="${TMP_DIR}/${SELF}.pid"
LOGFILE="${TMP_DIR}/${SELF}.log"
PWD_DIR="$PWD"
RUN_DIR="/"
STATUS_LINE=""
STATUS_DELAY="0.1"
NET_UP_FILE="${TMP_DIR}/${SELF}.net"
PING_IP="8.8.8.8"
PING_DEADLINE="5" # seconds until ping gives up and says nope, im offline



################################################################################
#                            Function definitions                              #
################################################################################

# log function
log() {
	_LOG_TIME_STAMP="$(date +%c)"
	touch "$LOGFILE"
	echo "$_LOG_TIME_STAMP	$*" >> "$LOGFILE"
}

# error function
err() {
	log "ERROR:	$*"
	return 1
}

# fatal error function
die() {
	err "$*"
	exit 1
}

clock_status() {
	date +'%a %b %d %R:%S'
}

audio_status() {
	[ -x "$(command -v amixer)" ] || return 1

	AUDIO="$(amixer get Master | tail -1 | awk '{print $6}' | tr -d '[]')"
	_TMP_VOL="$(amixer get Master | tail -1 | awk '{ print $5 }' | tr -d '[]')"
	VOL="$(printf "%3s" "$_TMP_VOL")"

	echo "$AUDIO $VOL"
}

net_status() {
	[ -f /proc/net/wireless ] && [ "$(cat "$NET_UP_FILE")" = "TRUE" ] || return 1

	_TMP_NET="$(tail -1 /proc/net/wireless | awk '{print $3}' | tr -d '.')%"
	_TMP_SSID=""

	[ -x "$(command -v iwgetid)" ] && _TMP_SSID="$(iwgetid -r): "

	echo "${_TMP_SSID}${_TMP_NET}"
}

battery_status() {
	[ -x "$(command -v acpi)" ] || return 1

	# battery percentage
	PER="$(acpi | awk '{print $4}' | tr -d ',')"

	# Charging/Discharging state
	BAT="$(acpi | awk '{print $3}' | tr -d ',')"

	echo "$BAT $PER"
}

update_status() {
	# reset status
	STATUS_LINE=""
	TOP_STATUS=""
	BOT_STATUS=""

	STATUS_LINE="[ $(clock_status) ] $STATUS_LINE"
	STATUS_LINE="[ $(audio_status) ] $STATUS_LINE"
	STATUS_LINE="[ $(net_status) ] $STATUS_LINE"
	STATUS_LINE="[ $(battery_status) ] $STATUS_LINE"

	#put it in the xsetrootname
	if [ -x "$(command -v xsetroot)" ] && [ -x "$(command -v dwm)" ]
	then
		xsetroot -name "$STATUS_LINE" || err "Could not update root window."
	fi

	sleep "$STATUS_DELAY"
}

is_net_connected() {
	# predicate function, exit code 0 = true, else false
	[ -x "$(command -v ping)" ] || err "ping is not installed, are you crazy?" || return 1

	ping -c 1 -w "$PING_DEADLINE" "$PING_IP" >/dev/null 2>&1 && return 0

	err "could not reach $PING_IP, system offline"
	return 1
}

check_net_is_up() {
		NET_UP_STATUS="FALSE"

		if is_net_connected
		then
			NET_UP_STATUS="TRUE"
		fi

		echo $NET_UP_STATUS > "$NET_UP_FILE"

		log "Network is up: $NET_UP_STATUS"
}

check_network() {
	while true
	do
		check_net_is_up
		sleep 120 # 2 minutes
	done
}

# main function
main() {
	log "Initializing main($*)."
	[ -x "$(command -v dwm)" ] || {
		log "No need for status as no programs will use it, exiting."
		return 0
	}

	check_net_is_up # check the network conection
	check_network & # keep checking network in the background

	log "Entering main($*) loop."
	while true
	do
		update_status
	done

	# unreachable
	err "Unreachable section reached, loop exited $?"
	return 1
}



################################################################################
#                                Init daemon                                   #
################################################################################

# Init logfile
{
	echo "Logfile for $SELF - $0"
	echo "PIDFILE:	$PIDFILE"
	echo "LOGFILE:	$LOGFILE"
	echo "PWD_DIR:	$PWD_DIR"
	echo "RUN_DIR:	$RUN_DIR"
} > "$LOGFILE"

# Init dirs
mkdir -p "$TMP_DIR"



################################################################################
#                                  Run daemon                                  #
################################################################################

# Change to safe running dir
cd "$RUN_DIR" || die "Could not enter RUN_DIR"

# Process PID file
if [ -f "$PIDFILE" ]
then
	if ps -p "$(cat "$PIDFILE")" >/dev/null 2>&1
	then
		die "PID is still running."
	else
		log "PID file found but process not found."
		rm "$PIDFILE"
	fi
fi

# Create PID file
echo "$$" > "$PIDFILE" || die "Could not create PID file"

# call main
log "exec main($*) {...}"
main "$@" 2>&1 | tee "$LOGFILE" || err "cannot log main($*) {...} output"
log "main($*) {...} completed with exit code $?"

# Remove PID file
rm -f "$PIDFILE" || die "Could not remove PID file."

# exit success
exit 0

