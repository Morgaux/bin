#!/bin/sh

##
# Dynamic Status - set status for dwm and dvtm
##



################################################################################
#                              Configuration vars                              #
################################################################################

PREFIX="" # "" means / set to $HOME for local files
SELF="$(basename "$0")"
SRC_DIR="$(dirname "$0")"
TMP_DIR="$PREFIX/tmp"
PIDFILE="${TMP_DIR}/${SELF}.pid"
LOGFILE="${TMP_DIR}/${SELF}.log"
PWD_DIR="$PWD"
RUN_DIR="/"
STATUS_LINE=""
STATUS_DELAY="0.1"
NET_UP_FILE="${TMP_DIR}/${SELF}.net"
PING_IP="8.8.8.8"
PING_DEADLINE="5" # seconds until ping gives up and says nope, im offline



################################################################################
#                            Function definitions                              #
################################################################################

# log function
log() {
	_LOG_TIME_STAMP="$(date +%c)"
	touch "$LOGFILE"
	echo "$_LOG_TIME_STAMP	$*" >> "$LOGFILE"
}

# error function
err() {
	log "ERROR:	$*"
	return 1
}

# fatal error function
die() {
	err "$*"
	exit 1
}

clock_status() {
	STATUS_LINE=" [ $(date +'%a %b %d %R:%S') ]$STATUS_LINE"
}

audio_status() {
	if [ -x "$(command -v amixer)" ] && \
		[ "$(amixer get Master | tail -1 | awk '{print $6}' | tr -d '[]')" = "on" ]
	then
		# volume % with leading space for padding if <10%
		_TMP_VOL="$(amixer get Master | tail -1 | awk '{ print $5 }' | tr -d '[]')"
		VOL="$(printf "%3s" "$_TMP_VOL")"
	else
		# mute symbol
		VOL="OFF"
	fi
	STATUS_LINE=" [ Vol: $VOL ]$STATUS_LINE"
}

net_status() {
	# offline symbol, default value
	_NET_OFF="OFF"

	if [ -f /proc/net/wireless ] && [ "$(cat "$NET_UP_FILE")" = "TRUE" ]
	then
		_TMP_NET="$(tail -1 /proc/net/wireless | awk '{print $3}' | tr -d '.')%"
		STATUS_LINE=" [ Net: ${_TMP_NET} ]$STATUS_LINE"
	else
		STATUS_LINE=" [ Net: ${_NET_OFF} ]$STATUS_LINE"
	fi
}

battery_status() {
	if [ -x "$(command -v acpi)" ]
	then
		# battery percentage
		PER="$(acpi | awk '{print $4}' | tr -d ',')"
		# Charging/Discharging state
		#BAT="$(acpi | awk '{print $3}' | tr -d ',')"
		STATUS_LINE=" [ Bat: $PER ]$STATUS_LINE"
	fi
}

update_status() {
	# reset status to a space
	STATUS_LINE=" "

	clock_status	# date and time
	audio_status	# volume
	net_status	# network strength
	battery_status	# battery

	#put it in the xsetrootname
	if [ -x "$(command -v xsetroot)" ] && [ -x "$(command -v dwm)" ]
	then
		xsetroot -name "$STATUS_LINE" || err "Could not update root window."
	fi

	sleep "$STATUS_DELAY"
}

update_status_10_times() {
	for i in 0 1 2 3 4 5 6 7 8 9
	do
		: $i # no op to validate the unused $i variable
		update_status
	done
}

update_status_100_times() {
	for i in 0 1 2 3 4 5 6 7 8 9
	do
		: $i # no op to validate the unused $i variable
		update_status_10_times
	done
}

is_net_connected() {
	# predicate function, exit code 0 = true, else false
	[ -x "$(command -v ping)" ] || err "ping is not installed, are you crazy?" || return 1
	ping -c 1 -w "$PING_DEADLINE" "$PING_IP" >/dev/null 2>&1 && return 0
	err "could not reach $PING_IP, system offline"
	return 1
}

check_network() {
	NET_UP_STATUS="FALSE"

	if is_net_connected
	then
		NET_UP_STATUS="TRUE"
	fi

	echo $NET_UP_STATUS > "$NET_UP_FILE"

	log "Network is up: $NET_UP_STATUS"
}

# main function
main() {
	log "Initializing main($*)."

	[ -x "$(command -v dwm)" ] || {
		log "No need for status as no programs will use it, exiting."
		return 0
	}

	log "Entering main($*) loop."

	check_network & # check network before loop

	# while loop to update status
	while true
	do

		update_status_100_times # allow 10 seconds for other background tasks

		# check if there is a network conection
		check_network &

		#sleep 1

	done

	# unreachable
	err "Unreachable section reached, loop exited $?"
	return 1
}



################################################################################
#                                Init daemon                                   #
################################################################################

# Init logfile
{
	echo "Logfile for $SELF - $0"
	echo "PIDFILE:	$PIDFILE"
	echo "LOGFILE:	$LOGFILE"
	echo "PWD_DIR:	$PWD_DIR"
	echo "RUN_DIR:	$RUN_DIR"
} > "$LOGFILE"

# Init dirs
mkdir -p "$TMP_DIR"



################################################################################
#                                  Run daemon                                  #
################################################################################

# Change to safe running dir
cd "$RUN_DIR" || die "Could not enter RUN_DIR"

# Process PID file
if [ -f "$PIDFILE" ]
then
	if ps -p "$(cat "$PIDFILE")" >/dev/null 2>&1
	then
		die "PID is still running."
	else
		log "PID file found but process not found."
		rm "$PIDFILE"
	fi
fi

# Create PID file
echo "$$" > "$PIDFILE" || die "Could not create PID file"

# call main
log "exec main($*) {...}"
main "$@" >> "$LOGFILE"
log "main($*) {...} completed with exit code $?"

# Remove PID file
rm "$PIDFILE" || die "Could not remove PID file."

# exit success
exit 0

