#!/bin/sh

# https://gitlab.com/morgaux/bin
# @Author:	Morgaux Meyer
# @License:	MIT (C) 2019

##
# A UNIX Daemon template in pure Shell
#
# Although included in the ~/bin directory, it is writen in pure sh and has no
# dependencies on the other sripts in this repository. This template allows any
# arbitrary .sh script to be used as a daemon, simply by placing the contents
# in the main function. This can even be automated with sed to create a coppy
# with the main function filled out. Although, helper funtions would need to be
# declared out side of the main().
#
# Obviously, there are many considerations when writing a script or program that
# is run silently in the backgound. While this template attempts to address as
# many of these as possible, the primary goal is to be POSIX compliant, so that
# any existing script can be easily modified, and so that new scripts can be
# writen as freely as possible.
#
# Curently, this template allows for logging all output from main, as well as
# logging explicit messages and even errors. A PID file is used to prevent
# multiple daemons running if the have the same name, however, if an deamonized
# proccess is abruptly ended or killed without first removing the PID file a new
# process can still open and will clain the PID. The procces will cd into the /
# directory after initializing, so that all main() code is run in the filesystem
# root. This prevents filesystems and directories from getting locked by the
# running process, e.g. to unmount a storage device.
#
# The main funtion is left very open and free, and so still requires the author
# to be aware of possible issues that can arise if running in the background.
# Most daemons will block STDIN preventing the process from hangin while waiting
# for user input. Although this is wise, it restricts the use of the author to
# read from input. For this reason, the author is encouraged, but not required,
# to refrain from using STDIN for input from the user/controlling process.
#
# As the main function may contain a single line or thousands, error handling
# and recovery is left to the author. The log, err, and die included funtions
# allow for consistent implementations. log() will write a message to the given
# logfile. err() will clearly log an error message and always return a non zero
# success code for failure pipelines. die() will kill the daemon in the case of
# an unrecoverable error, an clearly log the cause. These functions may be used
# and modified per implementation, however, the serve as a basis on which one
# can build a roubust daemon program.
#
# In keeping with the Suckless Philosophy, all configuration is maintained in
# the source code, however, in contrast, there is no config.sh file. Any minor
# behavioural or functional changes should be added to the configuration section
# as local scope variables. This makes making small changes, such as where the
# log file should be, simple to make and understand.
##



################################################################################
#                              Configuration vars                              #
################################################################################

PREFIX="$HOME" # set to / if running with permissions
SELF="$(basename "$0")"
PIDFILE="$PREFIX/tmp/${SELF}.pid"
LOGFILE="$PREFIX/tmp/${SELF}.log"
PWD_DIR="$PWD"
RUN_DIR="/"



################################################################################
#                            Function definitions                              #
################################################################################

# log function
log() {
	_LOG_TIME_STAMP="$(date +%c)"
	touch "$LOGFILE"
	echo "$_LOG_TIME_STAMP	$*" >> "$LOGFILE"
}

# error function
err() {
	log "ERROR:	$*"
	return 1
}

# fatal error function
die() {
	err "$@"
	exit 1
}

# main function
main() {
	true #no-op
}



################################################################################
#                                Init daemon                                   #
################################################################################

# Init logfile
{
	echo "Logfile for $SELF - $0"
	echo "PIDFILE:	$PIDFILE"
	echo "LOGFILE:	$LOGFILE"
	echo "PWD_DIR:	$PWD_DIR"
	echo "RUN_DIR:	$RUN_DIR"
} > "$LOGFILE"



################################################################################
#                                  Run daemon                                  #
################################################################################

# Change to safe running dir
cd "$RUN_DIR" || die "Could not enter RUN_DIR"

# Process PID file
if [ -f "$PIDFILE" ] ; then
	ps -p "$(cat "$PIDFILE")" >/dev/null 2>&1 && die "PID is still running."
	rm "$PIDFILE"
fi

# Create PID file
echo "$$" > "$PIDFILE" || die "Could not create PID file"

# call main
main "$@" >> "$LOGFILE" 2>&1

log "main() {...} completed with exit code $?"

# Remove PID file
rm "$PIDFILE" || die "Could not remove PID file."

# exit success
exit 0

